/**
 * A repository has the task of managing the retrieval of data from multiple sources (offline and online databases)
 * Queries and Fetches from the database have to be manually executed on the background thread as a requirement from Room.
 * The repository calls methods to do these Queries and Fetches.
 */

package com.orbital2019.plannerplusplus.model

import android.app.Application
import androidx.lifecycle.LiveData
import com.orbital2019.plannerplusplus.model.entity.EventEntity
import com.orbital2019.plannerplusplus.model.entity.TaskEntity

// TODO: check if this can be done using java's ExecutorService
/**
 * PlannerRepository is the repository for the planner app.
 * In this case, the only database is the offline database (which is the AppDatabase class)
 * Queries to the database are implemented via AsyncTasks which are generated by DaoAsyncProcessor
 * Interfaces EventRepository and TaskRepository contain methods that query the event and task tables, respectively.
 */
internal class PlannerRepository(application: Application) : EventRepository, TaskRepository {
    private val database: AppDatabase by lazy {
        AppDatabase.getInstance(application)
    }
    override var eventDao = database.eventDao()
    internal var allEvents: LiveData<List<EventEntity>> = eventDao.getAllEvents()

    override var taskDao: TaskDao = database.taskDao()

    internal var allTasks: LiveData<List<TaskEntity>> = taskDao.getAllTasks()
    internal var numIncompleteTasks: LiveData<Int> = taskDao.countIncompleteTasks()
    internal var numCompletedTasks: LiveData<Int> = taskDao.countCompletedTasks()

}

