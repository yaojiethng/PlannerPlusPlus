/** PlannerRepository is the repository for the planner app
 * A repository has the task of managing the retrieval of data from multiple sources (offline and online databases)
 * In this case, the only database is the offline database (which is the AppDatabase class)
 * Queries and Fetches have to be manually executed on the background thread as a requirement from Room.
 * (Currently implemented via AsyncTasks which are generated by DaoAsyncProcessor)
 */

package com.orbital2019.plannerplusplus.model

import android.app.Application
import androidx.lifecycle.LiveData

// TODO: check if this can be done using java's ExecutorService
// TODO: single asyncTask constructor instead of this copy pasted mess

internal class PlannerRepository(application: Application) : EventRepository, TaskRepository {
    private val database: AppDatabase by lazy {
        AppDatabase.getInstance(application)
    }
    override var eventDao = database.eventDao()
    internal var allEvents: LiveData<List<EventEntity>> = eventDao.getAllEvents()

    override var taskDao: TaskDao = database.taskDao()

    internal var allTasks: LiveData<List<TaskEntity>> = taskDao.getAllTasks()
    internal var numIncompleteTasks: LiveData<Int> = taskDao.countIncompleteTasks()
    internal var numCompletedTasks: LiveData<Int> = taskDao.countCompletedTasks()
}

